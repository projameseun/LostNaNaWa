#include <iostream>

int main()
{

	/*
	포인터 : 메모리 주소를 저장하는 변수 
	포인터도 변수다.
	x86 -> 32bit 환경을 말하는거다
	x64 -> 64bit 환경을 말하는거다
	포인터 변수가 메모리 주소를 저장하는 변수이므로, 
	타입(자료형) 관계없이 무조건 32bit환경에서는 4byte, 64bit환경에서는 8btye를 차지하게 된다.

	주소의 단위는 1Byte이다 .

	자료형* 변수;

	&(앰퍼샌드) ampersend 주소연산자 

	참조하다
	포인터를 선언 이나 초기화하고 
	다음에 나온포인터변수에 *가 붙어있으면 참조 연산자라고 부르는데
	이기능은 포인터에 가리키는 주소에 저장된 값을 반환한다.
	
	역참조란 포인터변수가 다른변수의 메모리 주소를 저장하고 잇을때 해당 주소에 접근하여
	값을 얻어오거나 변경하는것을 말한다.

	★
	포인텨변수마다 각각의 고유자료형 이름을 가지는 이유는 변수가 시작되는 주소앞에서 
	얼마만큼의 크기를 읽어들일지 결정하는 거다.
	그래서 우리가 만약에 다른 자료형을 넣게 된다면 컴파일러는 오류를 띄운다.
	하지만 강제로 사용자가(강제형변환)을 통해서 변환을 하게 되면 원하지 않는 값이 들어가게 되는데
	그 이유는 변수를 표현할때 음수나,양수를 표현하는 방식이 다른것 처럼 
	포인터도 자료형에 따라 표현이 다르다.

	*/

	int iNum = 100;
	int* ptr;
	//std::cout << sizeof(ptr);
	
	ptr = &iNum;

	(*ptr) = 500;
	
	std::cout << (*ptr) << std::endl;

	iNum = 200;
	
	float fNum = 10.f;
	
	int* pNum = (int*)&fNum;	//컴파일은 오류를 범하는데 사용자가 강제 형변환을 하게 되면 강제로 넣을수 있다.

	iNum = *pNum;

	std::cout << iNum << std::endl;
	


	
	return 0;
}
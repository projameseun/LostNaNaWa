//#include <iostream>
//#include <Windows.h>
//
//
//
//int main()
//{
//
//	
//	//진수: 2진수(Binary) , 8진수(Otcal) ,10진수 (Decimal) 16진수( Hexadecimal)
//	/*
//		2진수 -> 0,1로 이루어진 2가지 숫자만 표현이 가능하다(컴퓨터는 0,1로만 만들어져있다)
//		8진수 -> 0 ~ 7로 이루어진 8가지 숫자만 표현이 가능하다.
//		10진수 -> 0 ~ 9로 이루어진 10가지 숫자만 표현이 가능하다.
//		16진수 -> 0 ~ 15로 이루어진 16가지의 숫자로 표현이 가능하다. 
//		하지만, 16진수는 2자리숫자인 10~15를 표현할때 A~F로 표현을 한다.
//		16진수를 사용하는 이유-> 바이너리(2진수)로 표현했을때 1바이트의 값을 "1101 1111"로 표현할수도 있지만 
//		16진수를 사용하게 되면 "DF"로 표현할수도 있다. 따라서 바이너리 보다 자릿수를 덜 차지하기 때문에 효울이 좋아진다.
//
//
//		16진수를 10 ~15가아닌 영어 알파벳 A  ~ F로 표현을 하는 이유
//		ex) 110은 숫자는 1 10인지 11 0 인지 아니면 1 1 0 인지 구분이 애매하다.
//		그래서 10 ~ 15 두자리 숫자는 알파벳으로 표현하여 확실하게 처리를 한다.\
//
//		★★16진수는 앞에 0x를 붙여서 표현한다.
//	
//
//		16진수를 오로지 숫자로 표현했을때 ex)
//		0x110	1 1 0
//		0x1a	1 10
//		0xb0	11 0
//		
//		★10진수를 2진수로 변환하는 방법.
//		2진수로 변환을 할때는 더이상 나눌수 없을때까지 2로 계속 나누어준다.
//		59를 2진수로 나누어 보자.
//		59 / 2 = 29 ...1
//		29 / 2 = 14 ...1
//		14 / 2 = 7  ...0
//		7 / 2 = 3 .....1
//		3 / 2 = 1 .....1
//		1 1 1 0 1 1
//
//		★2진수를 10진수로 변환하는 방법
//		1.가장 오른쪽부터 1, 2 , 4 ,8 .....2의배수로 증가한 값을 부여한다.
//
//		2.
//		1		1		1		0		1		1
//		2의5승	2의4승	2의3승	2의2승	2의1승	2의0승		
//		32		16		8		4		2		1
//		3.여기서 1인값을 모두 더해준다.
//		32 + 16 + 8 + 2 + 1 = 59
//
//		★2진수를 16진수로 변환하는 방법
//		16진수는 2진수로 변환을 한 상태에서 변환 하는것이좋다.
//		110 0111를 16진수로 변환해보자 
//
//		1.오른쪽 끝부터 4자리씩 끊어준다.
//
//		1	1	0	//	0	1	1	1
//		★★2. 2진수의 4자리가 16진수의 1자리가 된다.
//		오른쪽끝부터 2의0승,2의1승,2의2승....값을 부여해준다.
//		1	1	0	//	0	1	1	1
//		4	2	1		8	4	2	1
//		위에와 같이 1인값을 모두 더해준다
//		4 + 2 // 4 + 2+ 1
//		
//		0x67
//		
//		★16진수를 2진수로 변환하는 방법
//		16진수 각 자리별로 2로 나누어서 더이상 나눌수 없을때까지 나누면 된다.
//		
//		6 / 2 = 3 ....0
//		3 / 2 = 1 ....1	  ==>110
//
//		7 / 2 = 3 ....1
//		3 / 2 = 1 ....1  ==> 111
//
//		110 0111
//
//		197를 2진수, 16진수로 변환해보자.
//
//		1100 0101 
//		0xC5
//		
//		const(상수)
//		상수란? 수식에서 변하지 않는 값
//		컴퓨터에서 말하는 상수는 ==> 변수에 초기화를 하게되면 한번 그 정해진 값은 절대 바꿀수 없다.
//		c++에서는 정의를 내리는 define대신 const 바람직하다.
//
//		const를 사용하는이유 
//		1.안정성 때문에...
//		프로그래밍을 만들다보면 변하지 않아야되는 값,문자 들이 있다. 그값들을 안전하게 보존하기 위해서이다.
//		2.프로그래밍은 혼자 일하지 않는다....
//		다같이 일을할때 내가만든 어떤변수가 변하지 않아야 되는게 있다면 그값을 const를 사용해서 안전하게 보호할수있다.
//		
//		
//		*/
//
//	int iNum = 2000;
//
//	iNum = 20000;
//	iNum = 20;
//
//	const int iNumber = 2400;
//
//	//포인터를 배우면 const에대해서 다시한번 설명드리겠습니다.
//	
//	
//
//
//
//	return 0;
//}
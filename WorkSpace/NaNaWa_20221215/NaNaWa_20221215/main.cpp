#include <iostream>
#include <string.h>
//#include "test.h"
#define JAMES "제임스"
#define NANAWA 100

using namespace std;

namespace _DaYoung
{
	int iHp = 100;
	int iMp = 50;

	void Attack()
	{
		std::cout << "다영이가 공격을 하였습니다."<< std::endl;
	}
}

namespace _James
{
	int iHp = 1000;
	int iMp = 5000;

	void Attack()
	{
		std::cout << "제임스가 공격을 하였습니다." << std::endl;
	}
}

/*
c++로 코드로작성한 프로그램이 실제 실행되는 만들어지는 과정

컴파일:C++같은 사람이 보기 이해할수 있는 언어(고수준 언어)를 CPU가 이해할수 있는 언어(저수준 언어:기계어)로 번역하는 작업을 말한다.
C++ 언어같은경우에는 사람이 보기에는 좋은데 컴퓨터는 이해 할수가 없다.
그래서 이걸 컴퓨터가 이해할수 있게 번역해주는 일을 하는게 컴파일이다.

컴파일러:컴파일 작업을 해주는 프로그램을 말한다(컴퓨터가 이해하도록 기계어로 번역하는 프로그램)

-----------------------------------------------------------------------------------------------------
										======컴파일과정===================
실행 파일이 만들어지는 과정: 전처리 -> 컴파일 -> 빌드 ->링크(링커,링킹)연결 -> 실행파일생성
										======컴파일과정===================
----------------------------------------------------------------------------------------------------
전처리과정때 하는일
//주석 단축키
//Ctrl + K + C
주석제거: 소스코드에 주석을 전부제거한다. 주석은 우리만 알아볼수 있게 남긴 내용이기 때문에 컴퓨터는 알 필요가없다.

헤더파일 삽입:컴파일러에 의해 다른소스 파일에 자동으로 포함된 소스코드 파일이다.
#include 만나면 해당하는 헤더파일을 찾아 헤더파일에 있는 모든내용을 복사해서 소스코드에 삽입한다.
일반적으로 선언을 많이 하고있다.
<> 이표시는 라이브러리 헤더파일로써 운영체제의 특별한 위치에 있다.
"" 이표시는 내가 직접만든 디렉터리에서 헤더파일을 include 하도록 전처리기에 지시한다.

매크로로 치환및 적용:#define을 만나면 정의된 매크로를 저정하고 같은 문자열을 만나면 #define으로된 내용을 치환한다.

컴파일때 하는 일
컴파일러가 컴파일 작업을해서 저수준 언어로 번역된 언어를 빌드를 해주면서 .obj(목적파일)라는 파일을 cpp마다 생성해준다.
그런 후에 각 .obj파일들끼리 기능을 끌어다 사용하는게 있다면 링크를 걸어서 사용 할수 있게 해준후에 
최종적으로 기계어(0,1로 구성된언어) 로 만들어서 실행파일을 만들어준다.
Ctrl + B를 이용해서 컴파일을 하고 빌드를 해준다.
Ctrl + F5를 이용해서 만들어진 실행파일을 실행시켜준다.

코드를 작성하다보면 어떤값이 들어있는지? 또는 어디서 오류가 났을때 
중단점 이라는걸 걸어서 그위치에서 발견하거나 버그의 원인을 찾아 수정하는 과정을 디버깅이라고 한다.
F9를 통해서 디버깅을 할수 있다.

라이브러리:컴퓨터에서 즉시 개발자들이 사용할수 있도록 공통으로 사용될수 있는 특정한 기능을 모듈화 한것이다.

모듈:특정 기능별로 나누어지는 프로그램에 한 덩어리라고 말할수 있다.

우리가 몇만줄의 코드를 한 파일에 작성한다면 매우 비효줄적일 것이다.
효울적으로 코드를 짜기위해서 필요한게  모듈,모듈화 프로그래밍이다.

ex)std::cout << "안녕하세요" << std::endl;
iostream에 있는 파일을 읽어들이고 cout 출력함수를 갖고와서 출력이 되는것이다.
자주 사용하는 기능을 클래스와 함수들을 모듈화 하여 프로그래밍한것을 모듈화 프로그래밍 이라고한다.
쉽게 말을하면 모듈화는 각각의 기능들을 파일별로 나뉘어 놓은걸 말한다.

표준라이브러리:iostream,cstring,map,new,memcpy,string등 

C++에서는 반드시 진입점 함수가 필요하다.
main으로 이름이 정해져있고 반드시 꼭 main함수를 만들어 주어야 한다.
main 함수안에 작성된 코드들만 프로그램이 실행시 영향을 준다.

네임스페이스(이름공간)
std라는 namespace안에 구현 되어 있다.
네임스페이스는 변수 이름이나 함수이름과 같이 명칭을 사용하는 공간으로 소속을 나타낸다.

c++은 이름이 같은경우 구분이 불가능하다. 그렇기 때문에 이름이 충돌되는 상황을 최대한 막아주어야 한다.
namespace는 이름이 충돌될 경우를 대비하여 소속을 지정해주는 기능으로 만들어져 있다.

::범위지정연산자이다. 전역에서 선언한것에 직접접근할수 있다.

콘솔창 출력기능
cout은 std namespace안에 만들어져 있는 기능이기 때문에 std::를 붙여서 사용해야된다.
::범위지정연산자
한줄의 끝은 ;세미콜론으로 한다.
\n 한줄 개행을 해준다. // std::endl(end line);

입력기능 
cin >> 
*/



int main()
{
	//변수: 메모리(램)에 공간을 만들고 해당공간에 값을 저장해서 사용할수 있게 해주는기능.
	//자료형(Data Type) 
	//정수형 : int char short long...
	//실수형 : float double ...

	//int 4byte크기를 갖고있다.
	//변수는 고정이 아니다 
	//0 : 값이라고 부른다.
	//= 대입연산자라고 부른다.
	int a = 0; 

	float fNumber = 4.f;
	
	//int a = 500;

	std::cout << NANAWA << std::endl;	

	int iHp = 30;

	_DaYoung::iHp = 1000;

	std::cout << iHp << std::endl;
	std::cout << _DaYoung::iHp << std::endl;
	_DaYoung::Attack();

	cout << a << endl;

	std::cout << iHp << "\n";
	std::cout << "Hellow Word\n";
	std::cout << "TestOupPut\n";

	//입력
	int iNumber = 0;

	std::cout << "숫자를 입력해주세요" << std::endl;
	std::cin >> iNumber;

	std::cout << iNumber << std::endl;

	//숙제 
	/*
	1.namespace를 하나만들어서 출력해보기 

	2.
	int iNum = 0;
	100을 출력해보세요
	

	3.
	int iNum2 = 0;
	1500을 입력받아 출력해보세요

	*/

	
	


	return 0;
}
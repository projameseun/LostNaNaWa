#include <iostream>

int main()
{
	/*
		const는 상수이다.
		상수화가 된것이다. 값이 바뀔수없고 초기화 할때 무조건 값을 넣어줘야된다.
		문법적으로 막아주고 있는것이지 정확히는 우리가 아는 진짜 상수가 아니라는 거다.
		
	*/

	//volatile 휘발성
	//선언된 변수를 최적화수행을 하지 않게 만든다.
	//레지스터메모리에 로드된 값을 사용하지 않고 매번 메모리를 참조한다.
	
	volatile const int iNum = 100;
	
	//l-value , r-value

	//l-vlaue 는 프로그램에서 액세스 할수 있는 주소가 존재한다.
	//l-value 는 변수,배열요소,lvalue참조,구조체 및 클래스 멤버 등 

	//r-value는 상수 

	short sNum = 200;

	sNum = 10;

	
	int* ptr = nullptr;

	ptr = (int*)&iNum;

	*ptr = 10;

	std::cout << iNum << std::endl;

	//컴파일러 입장에서는 iNum이 상수라고 본거다.
	//근데 cpu가 연산할때 레지스터메모리에서 기억하고 바로 쓰게 된거다.

	//cpu가 메모리쪽으로 접근할때 버스라는게 존재한다.
	//이 버스에 메모리가 크면클수록 공간차지를 많이 하게 되고
	//메모리(RAM)는 특성상 기록된 내용을 유지하기 위해서 주기적으로 정보를 다시 써야된다.
	//그런데 다시 쓰는 작업이 시간을 또 소모한다. 
	//그래서 cpu에서 빠르게 처리 할수 있는 뭔가를 만들기위해서 만들어진게 레지스터리 메모리이다.

	

	
	

	
	return 0;
}